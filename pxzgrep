#!/bin/sh

# Copyright 2020, 2021 Axel Beckert <axel@ethz.ch>, ETH Zurich IT Security Center
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/.

options=""

# Switch between internal wrapper around xzgrep which handles output
# files and xargs-suitable grep exit codes, and the actual main
# program.

# Calling xzgrep
if [ "$1" = '--call-xzgrep' ]; then
    shift

    while getopts :-: p; do
        if [ "$p" = "-" ]; then
	    options="$options --$OPTARG"
        elif [ "$p" = "?" ]; then
	    options="$options -$OPTARG"
        fi
    done
    shift `expr $OPTIND - 1`
    pattern="$1"
    shift
    file="$1"
    shift

    if [ -n "$*" ]; then
        echo "$0 --call-xzgrep only supports two positional parameters: a search pattern and a single file name" 1>&2
        exit 2;
    fi

    xzgrep $options "$pattern" "$file" > ./$(basename "$file" .xz)
    rc=$?
    case $rc in
        0) exit 1   ;;
        1) exit 0   ;;
        2) exit 255 ;;
    esac

else

    parallel=$(egrep -c "^processor\s*: " /proc/cpuinfo)
    verbose=""
    while getopts :Vp:-: p; do
        #echo @="$@"
        #echo p="$p"
        if [ "$p" = "V" ]; then
	    verbose=--verbose
        elif [ "$p" = "p" ]; then
	    parallel="$OPTARG"
        elif [ "$p" = "-" ]; then
            if [ "$OPTARG" = "help" ]; then
	        cat <<EOF
Usage: $0 [-p<n>] [-V] [<xzgrep options>] <pattern> <file1> <file2> [<more files>]

Parameters:

Takes xz compressed files as parameters.

The grep result is saved per file in a file with the same basename
(e.g. abc.xz becomes abc), but in the _current_ working directory.

Options:

-p: Takes a number as parameter and is passed to xargs as -P (number
    of parallel processes spawned). Defaults to amount of cores
    present in the running system.

-V: Verbose, passes --verbose to xargs.

--call-xzgrep: Used internally to run as wrapper around xzgrep.

All other options are passed to xzgrep, especially -F and -E.
EOF
	        exit 0
            else
	        options="$options --$OPTARG"
            fi
        elif [ "$p" = "?" ]; then
	    options="$options -$OPTARG"
        fi
    done
    shift `expr $OPTIND - 1`
    pattern="$1"
    shift
    files="$@"

    echo "$files" | xargs -n1 -P$parallel $verbose "$0" --call-xzgrep $options "$pattern"

    # xargs exit code handling
    # ------------------------
    #
    # grep exits with 0 if there was a match, with 1 if there was no match
    # and with 2 if there was an error. But we want this logic as over all
    # exit state.
    #
    # xargs exits with the following status:
    # 0   if it succeeds
    # 123 if any invocation of the command exited with status 1-125
    # 124 if the command exited with status 255
    # 125 if the command is killed by a signal
    # 126 if the command cannot be run
    # 127 if the command is not found
    # 1   if some other error occurred.
    #
    # Unfortunately xargs throws 1 and 2 into the same error class, so
    # above we invert grep's exit codes and change 2 to 255 to allow to
    # handle this past xargs and the return grep-ish exit codes again:
    #

    case $? in
        # Everything went fine, all files had matches.
        123)
            exit 0;;
        # Everything went fine, some file had no matches.
        0)
            exit 1;;
        124)
            exit 2;;
        *)
            exit $?;;
    esac

fi
